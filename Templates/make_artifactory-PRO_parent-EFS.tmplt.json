{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "This template coordinates the running of the Artifactory SG, S3,RDS, IAM, EC2 and ELBv2 templates.",
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "Child Templates"
          },
          "Parameters": [
            "SgTemplateUri",
            "BucketTemplateUri",
            "IamTemplateUri",
            "RdsTemplateUri",
            "Ec2TemplateUri",
            "ElbTemplate"
          ]
        },
        {
          "Label": {
            "default": "EC2 Parameters"
          },
          "Parameters": [
            "AmiId",
            "InstanceType",
            "ProvisionUser",
            "KeyPairName",
            "AdminPubkeyURL",
            "Hostname",
            "Domainname",
            "ProxyHostname",
            "AkaList",
            "SubnetIds",
            "NoPublicIp"
          ]
        },
        {
          "Label": {
            "default": "Artifactory App Parameters"
          },
          "Parameters": [
            "ArtifactoryOsPrepScriptUrl",
            "ArtifactoryAppInstallScriptUrl",
            "ProxyTemplateUrl",
            "ArtifactoryLicenseUrl",
            "JfrogRepositoryUrl",
            "ArtifactoryRpm",
            "ArtifactoryHome"
          ]
        },
        {
          "Label": {
            "default": "Database Parameters"
          },
          "Parameters": [
            "DbInstanceType",
            "PgsqlVersion",
            "DbDataSize",
            "DbInstanceName",
            "DbNodeName",
            "ArtifactoryDbPort",
            "DbAdminName",
            "DbAdminPass"
          ]
        },
        {
          "Label": {
            "default": "ELB Parameters"
          },
          "Parameters": [
            "ProxyPrettyName",
            "ArtifactoryListenerCert",
            "ArtifactoryServicePort",
            "ElbSubnets",
            "BackendTimeout"
          ]
        },
        {
          "Label": {
            "default": "Miscellaneous Parameters"
          },
          "Parameters": [
            "ServiceTld",
            "RolePrefix",
            "BackupBucket",
            "TargetVPC",
            "InfraHaSubnets",
            "EpelRepo",
            "PyStache",
            "PipRpm",
            "PipIndexFips"
          ]
        }
      ],
      "ParameterLabels": {
        "BucketTemplateUri": {
          "default": "S3 Template"
        },
        "Ec2TemplateUri": {
          "default": "Instance Template"
        },
        "IamTemplateUri": {
          "default": "IAM Template"
        },
        "ProxyTemplateUrl": {
          "default": "Nginx-Proxy Config-template Url"
        },
        "RdsTemplateUri": {
          "default": "Database Template"
        },
        "SgTemplateUri": {
          "default": "SecurityGroups Template"
        }
      }
    }
  },
  "Outputs": {
    "ArtifactoryBackupBucket": {
      "Description": "Artifactory S3 backup bucket name.",
      "Export": {
        "Name" : { "Fn::Sub": "${AWS::StackName}-BackupBucket" }
      },
      "Value": { "Fn::GetAtt": [ "S3Res", "Outputs.BackupBucket" ] }
    },
    "ArtifactoryBackupBucketArn": {
      "Description": "Artifactory S3 backup bucket ARN.",
      "Export": {
        "Name" : { "Fn::Sub": "${AWS::StackName}-BackupBucketArn" }
      },
      "Value": { "Fn::GetAtt": [ "S3Res", "Outputs.BackupBucketArn" ] }
    },
    "ArtifactoryIamProfile": {
      "Description": "Artifactory IAM Profile",
      "Export": {
        "Name" : { "Fn::Sub": "${AWS::StackName}-IamProfile" }
      },
      "Value": { "Fn::GetAtt": [ "IamRes", "Outputs.InstanceRoleProfile" ] }
    },
    "ArtifactoryIamRole": {
      "Description": "Artifactory IAM Role",
      "Export": {
        "Name" : { "Fn::Sub": "${AWS::StackName}-IamRole" }
      },
      "Value": { "Fn::GetAtt": [ "IamRes", "Outputs.InstanceRole" ] }
    },
    "ArtifactoryIamRoleArn": {
      "Description": "Artifactory IAM Role-ARN",
      "Export": {
        "Name" : { "Fn::Sub": "${AWS::StackName}-IamRoleArn" }
      },
      "Value": { "Fn::GetAtt": [ "IamRes", "Outputs.InstanceRoleArn" ] }
    },
    "ArtifactoryInstanceId": {
      "Description": "Instance ID",
      "Export": {
        "Name" : { "Fn::Sub": "${AWS::StackName}-InstanceId" }
      },
      "Value": { "Fn::GetAtt": [ "Ec2Res", "Outputs.ArtifactoryInstanceId" ] }
    },
    "ArtifactoryRdsEndpoint": {
      "Description": "RDS DB's endtpoint FQDN.",
      "Export": {
        "Name" : { "Fn::Sub": "${AWS::StackName}-RdsEndpointFqdn" }
      },
      "Value": { "Fn::GetAtt": [ "RdsRes", "Outputs.RdsEndpointAddress" ] }
    }
  },
  "Parameters": {
    "AdminPubkeyURL": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Description": "URL the file containing the admin users' SSH public keys.",
      "Type": "String"
    },
    "AkaList": {
      "Description": "A comma-delimited list of FQDNs that service should also accept as valid names to service requests on behalf of.",
      "Type": "String"
    },
    "AmiId": {
      "AllowedPattern": "^ami-[0-9a-z]{8}$|^ami-[0-9a-z]{17}$",
      "Description": "ID of the AMI to launch (select a Red Hat or other EL-variant)",
      "Type": "String"
    },
    "ArtifactoryAppInstallScriptUrl": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Description": "URL to script that installs Artifactory to the EC2 instance.",
      "Type": "String"
    },
    "ArtifactoryDbPort": {
      "ConstraintDescription": "Must be between 1024 and 61000.",
      "Default": "5432",
      "Description": "The port-number the remote PostGreSQL server is listening on.",
      "MaxValue": "61000",
      "MinValue": "1025",
      "Type": "Number"
    },
    "ArtifactoryHome": {
      "ConstraintDescription": "An LSB-compliant, slash-delimited directory-path.",
      "Default": "/var/opt/jfrog/artifactory",
      "Description": "The root installation location for the Artifactory application.",
      "Type": "String"
    },
    "ArtifactoryLicenseUrl": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Description": "URL to Artifactory license file",
      "Type": "String"
    },
    "ArtifactoryListenerCert": {
      "Default": "",
      "Description": "Name/ID of the ACM-managed SSL Certificate to protect public listener.",
      "Type": "String"
    },
    "ArtifactoryOsPrepScriptUrl": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Description": "URL to script that prepares the EC2 instance's host OS for installation of Artifactory",
      "Type": "String"
    },
    "ArtifactoryRpm": {
      "Default": "jfrog-artifactory-pro",
      "Description": "Name of the Artifactory installation-RPM.",
      "Type": "String"
    },
    "ArtifactoryServicePort": {
      "Default": "8081",
      "Description": "TCP Port number that the Artifactory host listens to.",
      "MaxValue": "65535",
      "Type": "Number"
    },
    "BackendTimeout": {
      "Default": "600",
      "Description": "How long - in seconds - back-end connection may be idle before attempting session-cleanup",
      "MinValue": "60",
      "MaxValue": "3600",
      "Type": "Number"
    },
    "BackupBucket": {
      "AllowedPattern": "^[a-z][a-z0-9-]*[a-z0-9]*$|^$",
      "Description": "S3 Bucket for longer-term retention of backups (optional).",
      "Type": "String"
    },
    "BucketTemplateUri": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Description": "URI for the template that creates Artifactory's S3 buckets.",
      "Type": "String"
    },
    "DbAdminName": {
      "Description": "Name of the Artifactory master database-user.",
      "Type": "String"
    },
    "DbAdminPass": {
      "Description": "Password of the Artifactory master database-user.",
      "NoEcho": "True",
      "Type": "String"
    },
    "DbDataSize": {
      "ConstraintDescription": "Must be between 5GB and 16384GB.",
      "Default": "5",
      "Description": "Size in GiB of the RDS table-space to create.",
      "MaxValue": "16384",
      "MinValue": "5",
      "Type": "Number"
    },
    "DbInstanceName": {
      "Description": "Instance-name of the Artifactory database.",
      "Type": "String"
    },
    "DbInstanceType": {
      "AllowedValues": [
        "db.t2.micro",
        "db.t2.small",
        "db.t2.medium",
        "db.t2.large",
        "db.m3.medium",
        "db.m3.large",
        "db.m3.xlarge",
        "db.m3.2xlarge",
        "db.m4.large",
        "db.m4.xlarge",
        "db.m4.2xlarge",
        "db.m4.4xlarge"
      ],
      "Default": "db.t2.small",
      "Description": "Amazon RDS instance type",
      "Type": "String"
    },
    "DbNodeName": {
      "Description": "NodeName of the Artifactory database.",
      "Type": "String"
    },
    "InfraHaSubnets": {
      "Description": "Select at least two subnets, each in different Availability Zones",
      "Type": "List<AWS::EC2::Subnet::Id>"
    },
    "Domainname": {
      "ConstraintDescription": "An alphanumeric string to complete the domain portion of the instance's FQDN.",
      "Description": "Suffix for Artifactory's hostname and DNS record",
      "Type": "String"
    },
    "Ec2TemplateUri": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Description": "URI for the template that creates Artifactory's application-hosting EC2 instance.",
      "Type": "String"
    },
    "EfsTemplate": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Description": "URI for the template that creates the EFS used for hosting persistent data.",
      "Type": "String"
    },
    "ElbSubnets": {
      "Description": "Public-facing subnets for ELB to proxy requests from.",
      "Type": "List<AWS::EC2::Subnet::Id>"
    },
    "ElbTemplate": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Description": "URI for the template that creates the ELB providing public-to-private reverse-proxy service.",
      "Type": "String"
    },
    "EpelRepo": {
      "AllowedPattern": "^[a-z][a-z0-9-]*$",
      "ConstraintDescription": "An alphanumeric string that represents the EPEL yum repo's label.",
      "Default": "epel",
      "Description": "Name of network's EPEL repo.",
      "Type": "String"
    },
    "Hostname": {
      "ConstraintDescription": "An alphanumeric string to complete the hostname portion of the instance's FQDN.",
      "Default": "artifactory",
      "Description": "Node-name for Artifactory's hostname and DNS record",
      "Type": "String"
    },
    "IamTemplateUri": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Description": "URI for the template that creates Artifactory's Instance roles.",
      "Type": "String"
    },
    "InstanceType": {
      "AllowedValues": [
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "t2.xlarge",
        "t2.2xlarge",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "m4.16xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge"
      ],
      "Default": "t2.large",
      "Description": "Amazon EC2 instance type",
      "Type": "String"
    },
    "JfrogRepositoryUrl": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Default": "http://jfrog.bintray.com/artifactory-pro-rpms",
      "Description": "Base-URL of the yum repository hosting Artifactory RPMs.",
      "Type": "String"
    },
    "KeyPairName": {
      "Description": "Public/private key pairs allowing the provisioning-user to securely connect to the instance after it launches.",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "NoPublicIp": {
      "AllowedValues": [
        "false",
        "true"
      ],
      "Default": "true",
      "Description": "Controls whether to assign the instance a public IP. Recommended to leave at \"true\" _unless_ launching in a public subnet",
      "Type": "String"
    },
    "PgsqlVersion": {
      "AllowedValues": [
        "9.6.5",
        "9.6.3",
        "9.6.2",
        "9.6.1",
        "9.5.9",
        "9.5.7",
        "9.5.6",
        "9.5.4",
        "9.5.2"
      ],
      "Default": "9.6.3",
      "Description": "The X.Y.Z version of the PostGreSQL database to deploy.",
      "Type": "String"
    },
    "PipIndexFips": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Default": "https://pypi.org/simple/",
      "Description": "URL of pip index  that is compatible with FIPS 140-2 requirements.",
      "Type": "String"
    },
    "PipRpm": {
      "Default": "python2-pip",
      "Description": "Name of preferred pip RPM.",
      "Type": "String"
    },
    "ProvisionUser": {
      "AllowedPattern": "[a-z0-9]{6,12}+",
      "ConstraintDescription": "Alphanumeric string between 6 and 12 characters.",
      "Default": "artibuild",
      "Description": "Default login user account name.",
      "Type": "String"
    },
    "ProxyPrettyName": {
      "Description": "A short, human-friendly label to assign to the ELB (no capital letters).",
      "Type": "String"
    },
    "ProxyHostname":{
      "Description": "FQDN used by remote clients to attach to the Artifactory service.",
      "Type": "String"
    },
    "ProxyTemplateUrl": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Description": "URL to the Artifactory reverse-proxy configuration template-file.",
      "Type": "String"
    },
    "PyStache": {
      "Default": "pystache",
      "Description": "Name of preferred pystache RPM.",
      "Type": "String"
    },
    "RdsTemplateUri": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Description": "URI for the template that creates Artifactory's RDS-hoste PGSQL DB.",
      "Type": "String"
    },
    "RolePrefix": {
      "Description": "Prefix to apply to IAM role to make things a bit prettier (optional).",
      "Type": "String"
    },
    "ServiceTld": {
      "Default": "amazonaws.com",
      "Description": "TLD of the IAMable service-name.",
      "Type": "String"
    },
    "SgTemplateUri": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Description": "URI for the template that creates Artifactory's SGs.",
      "Type": "String"
    },
    "SubnetIds": {
      "Description": "Subnet to associate to the EC2 Instance",
      "Type": "AWS::EC2::Subnet::Id"
    },
    "TargetVPC": {
      "AllowedPattern": "^vpc-[0-9a-f]*$",
      "Description": "ID of the VPC to deploy cluster nodes into.",
      "Type": "String"
    }
  },
  "Resources": {
    "Ec2Res": {
      "DependsOn": "RdsRes",
      "Properties": {
        "Parameters": {
          "AdminPubkeyURL": { "Ref": "AdminPubkeyURL" },
          "AkaList": { "Ref": "AkaList" },
          "AmiId": { "Ref": "AmiId" },
          "AppVolumeDevice": "false",
          "AppVolumeMountPath": "/var/cache/artifactory",
          "AppVolumeSize": "10",
          "AppVolumeType": "gp2",
          "ArtifactoryAppInstallScriptUrl": { "Ref": "ArtifactoryAppInstallScriptUrl" },
          "ArtifactoryDbAdmin": { "Ref": "DbAdminName" },
          "ArtifactoryDbHost": {
            "Fn::GetAtt": [ "RdsRes", "Outputs.RdsEndpointAddress" ]
          },
          "ArtifactoryDbInst": { "Ref": "DbInstanceName" },
          "ArtifactoryDbPassword": { "Ref": "DbAdminPass" },
          "ArtifactoryDbPort": { "Ref": "ArtifactoryDbPort" },
          "ArtifactoryHome": { "Ref": "ArtifactoryHome" },
          "ArtifactoryLicenseUrl": { "Ref": "ArtifactoryLicenseUrl" },
          "ArtifactoryOsPrepScriptUrl": { "Ref": "ArtifactoryOsPrepScriptUrl" },
          "ArtifactoryRpm": { "Ref": "ArtifactoryRpm" },
          "BackupVolumeDevice": "false",
          "BackupVolumeMountPath": "/var/backups",
          "BackupVolumeSize": "10",
          "BackupVolumeType": "gp2",
          "CfnEndpointUrl": {
            "Fn::Join": [
              ".",
              [
                "https://cloudformation",
                { "Ref": "AWS::Region" },
                { "Ref": "ServiceTld" }
              ]
            ]
          },
          "Domainname": { "Ref": "Domainname" },
          "EpelRepo": { "Ref": "EpelRepo" },
          "Hostname": { "Ref": "Hostname" },
          "InstanceRole": {
            "Fn::GetAtt": [ "IamRes", "Outputs.InstanceRoleProfile" ]
          },
          "InstanceType": { "Ref": "InstanceType" },
          "JfrogRepositoryUrl": { "Ref": "JfrogRepositoryUrl" },
          "KeyPairName": { "Ref": "KeyPairName" },
          "NoPublicIp": { "Ref": "NoPublicIp" },
          "NoReboot": "false",
          "PersistentSharePath": {
            "Fn::Join": [
              "",
              [
                { "Fn::GetAtt": [ "EfsRes", "Outputs.EfsEndpoint" ] },
                ":/"
              ]
            ]
          },
          "PersistentShareType": "nfs",
          "PipIndexFips": { "Ref": "PipIndexFips" },
          "PipRpm": { "Ref": "PipRpm" },
          "ProvisionUser": { "Ref": "ProvisionUser" },
          "ProxyHostname": { "Ref": "ProxyHostname" },
          "ProxyTemplateUrl": { "Ref": "ProxyTemplateUrl" },
          "PyStache": { "Ref": "PyStache" },
          "S3BackupBucket": {
            "Fn::GetAtt": [ "S3Res", "Outputs.BackupBucket" ]
          },
          "SecurityGroupIds": {
            "Fn::Join": [
              ",",
              [
                { "Fn::GetAtt": [ "SgRes", "Outputs.AppSg" ] },
                { "Fn::GetAtt": [ "SgRes", "Outputs.NasSg" ] },
                { "Fn::GetAtt": [ "SgRes", "Outputs.RdsSg" ] }
              ]
            ]
          },
          "SubnetId": { "Ref": "SubnetIds" }
        },
        "TemplateURL": { "Ref": "Ec2TemplateUri" }
      },
      "Type": "AWS::CloudFormation::Stack"
    },
    "EfsRes": {
      "Properties": {
        "Parameters": {
          "EfsSg": { "Fn::GetAtt": [ "SgRes", "Outputs.NasSg" ] },
          "EfsSubnet": {
            "Fn::Join": [
              ",",
              { "Ref": "InfraHaSubnets" }
            ]
          },
          "ServiceTld": { "Ref": "ServiceTld" }
        },
        "TemplateURL": { "Ref": "EfsTemplate" },
        "TimeoutInMinutes": "10"
      },
      "Type": "AWS::CloudFormation::Stack"
    },
    "ElbRes": {
      "Properties": {
        "Parameters": {
          "ArtifactoryListenerCert": { "Ref": "ArtifactoryListenerCert" },
          "ArtifactoryListenPort": "443",
          "ArtifactoryInstanceId": {
            "Fn::GetAtt": [ "Ec2Res", "Outputs.ArtifactoryInstanceId" ]
          },
          "ArtifactoryServicePort": { "Ref": "ArtifactoryServicePort" },
          "BackendTimeout": { "Ref": "BackendTimeout" },
          "HaSubnets": {
            "Fn::Join": [
              ",",
              { "Ref": "ElbSubnets" }
            ]
          },
          "ProxyPrettyName": { "Ref": "ProxyPrettyName" },
          "SecurityGroupIds": {
            "Fn::Join": [
              ",",
              [
                { "Fn::GetAtt": [ "SgRes", "Outputs.AppSg" ] }
              ]
            ]
          },
          "TargetVPC": { "Ref": "TargetVPC" }
        },
        "TemplateURL": { "Ref": "ElbTemplate" },
        "TimeoutInMinutes": "10"
      },
      "Type": "AWS::CloudFormation::Stack"
    },
    "IamRes": {
      "DependsOn": "S3Res",
      "Properties": {
        "Parameters": {
          "BackupBucketArn": {
            "Fn::GetAtt": [ "S3Res", "Outputs.BackupBucketArn" ]
          },
          "RolePrefix": { "Ref": "RolePrefix" }
        },
        "TemplateURL": { "Ref": "IamTemplateUri" },
        "TimeoutInMinutes": "10"
      },
      "Type": "AWS::CloudFormation::Stack"
    },
    "RdsRes": {
      "DependsOn": "SgRes",
      "Properties": {
        "Parameters": {
          "DbAdminName": { "Ref": "DbAdminName" },
          "DbAdminPass": { "Ref": "DbAdminPass" },
          "DbDataSize": { "Ref": "DbDataSize" },
          "DbInstanceName": { "Ref": "DbInstanceName" },
          "DbInstanceType": { "Ref": "DbInstanceType" },
          "DbIsMultiAz": "true",
          "DbNodeName": { "Ref": "DbNodeName" },
          "DbSecurityGroup": {
            "Fn::GetAtt": [ "SgRes", "Outputs.RdsSg" ]
          },
          "DbStorageIops": "1000",
          "DbStorageType": "gp2",
          "DbSubnets": {
            "Fn::Join": [
              ",",
              { "Ref": "InfraHaSubnets" }
            ]
          },
          "PgsqlVersion": { "Ref": "PgsqlVersion" },
          "TargetVPC": { "Ref": "TargetVPC" }
        },
        "TemplateURL": { "Ref": "RdsTemplateUri" }
      },
      "Type": "AWS::CloudFormation::Stack"
    },
    "S3Res": {
      "Properties": {
        "Parameters": {
          "BackupBucket": { "Ref": "BackupBucket" }
        },
        "TemplateURL": { "Ref": "BucketTemplateUri" },
        "TimeoutInMinutes": "10"
      },
      "Type": "AWS::CloudFormation::Stack"
    },
    "SgRes": {
      "Properties": {
        "Parameters": {
          "TargetVPC": { "Ref": "TargetVPC" }
        },
        "TemplateURL": { "Ref": "SgTemplateUri" },
        "TimeoutInMinutes": "10"
      },
      "Type": "AWS::CloudFormation::Stack"
    }
  }
}
